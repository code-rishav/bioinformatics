# -*- coding: utf-8 -*-
"""tabletolatex.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wiiUK2HErdXhMd25lOE8Xx9pGFW4q8uz
"""

#script to generate latex codes for go terms
import pandas as pd
def round_up_or_non_zero(value):
  count = 3
  while(count<=6):
    pvalue = round(value,count)
    if pvalue!=0:
      return '{:.6f}'.format(pvalue)
    count += 1

#latex_code = "\\begin{tabular}{|c|c|c|c|c|c|c|c|}\n\\hline\n"
# with open("test.txt", "a") as myfile:
#     myfile.write(latex_code)

'''
{\nm{BP}} & {\nm{Regulation of SA node cell action potential}} & {\nm{2}} & {\nm{2.222}} &
{\nm{\textit{0.013}}} & {\nm{\textit{ANK2 RYR2}}} & {\nm{150.798}} & {\nm{0.883}}\\  \midrule
'''

def generate_latex(row):
  print(dict(row))
  category = row['Category'].strip()
  term = row['Term'].strip().split()
  term[0] = term[0].capitalize()
  count = int(row['Count'])
  perct = round(float(row['%']),3)
  pvalue = round_up_or_non_zero(row['PValue'])
  print("PVALUE",pvalue)
  genes = sorted(g.strip() for g in row["Genes"].split(','))
  fe = round(float(row['Fold Enrichment']),3)
  fdr = round(float(row['FDR']),3)

  latex_code = ""
  latex_code += f"{{\\nm{{{category}}}}} & {{\\nm{{{' '.join(term[:])}}}}} & {{\\nm{{{count}}}}} &"
  latex_code += f"{{\\nm{{{perct}}}}} & {{\\nm{{{str(pvalue)}}}}} & {{\\nm{{\\textit{{{' '.join(genes[:])}}}}}}} & "
  latex_code += f"{{\\nm{{{fe}}}}} & {{\\nm{{{fdr}}}}} \\\ \\midrule \n"

  return latex_code;


  '''
  latex_code = ""
  latex_code = f"\\multirow{{1}}{{*}}{{\\nm{{{category}}}}} & "
  if len(term) >= 3:
    terms = ' '.join(term[:3])
    del term[:3]
    latex_code += f"\\multirow{{1}}{{*}}{{\\nm{{{terms}}}}} & "
  else:
    terms = ' '.join(term[:])
    del term[:]
    latex_code += f"\\multirow{{1}}{{*}}{{\\nm{{{terms}}}}} & "

  latex_code += f"\\multirow{{1}}{{*}}{{\\nm{{{count}}}}} & "
  latex_code += f"\\multirow{{1}}{{*}}{{\\nm{{{round(perct,3)}}}}} & "
  latex_code += f"\\multirow{{1}}{{*}}{{\\nm{{\\textit{{{round(pvalue,6)}}}}}}} & "
  latex_code += f"\\multirow{{1}}{{*}}{{\\nm{{{' '.join(genes[:1]).strip()}}}}} & "
  del genes[:1]
  latex_code += f"\\multirow{{1}}{{*}}{{\\nm{{{round(fe,3)}}}}} & "
  latex_code += f"\\multirow{{1}}{{*}}{{\\nm{{{round(fdr,3)}}}}}\\\ "

  while True:
    latex_code += "\n & "
    if len(term) >= 3:
      terms = ' '.join(term[:3])
      del term[:3]
      latex_code += f"\\nm{{{terms}}} & "
    elif len(term) <3 and len(term) > 0 and len(genes) != 0:
      terms = ' '.join(term[:])
      del term[:]
      latex_code += f"\\nm{{{terms}}} & "
    elif len(term) <3 and len(term) > 0 and len(genes) == 0:
      terms = ' '.join(term[:])
      del term[:]
      latex_code += f"\\nm{{{terms}}} & & & & & & \\\ "
    else:
      latex_code += f" & "

    if len(genes) >=2:
      latex_code += f"& & &  \\nm{{\\textit{{{' '.join(genes[:2]).strip()}}}}}  & & \\\ "
      del genes[:2]
    elif len(genes) <2 and len(genes) > 0:
      latex_code += f" & & &  \\nm{{\\textit{{{' '.join(genes[:2]).strip()}}}}}  & & \\\ "
      del genes[:]
    elif len(genes) <2 and len(genes) > 0 and len(term)==0:
      latex_code += f"& & & &  \\nm{{\\textit{{{' '.join(genes[:2]).strip()}}}}}  & & \\\ "
      del genes[:]
    else:
      pass

    if len(term) ==0 and len(genes) == 0:
      latex_code += f"\\midrule \n"
      print(latex_code)
      return latex_code
      '''




i = 0
df = pd.read_csv("go_atc.csv")
for index,row in df.iterrows():
  i += 1
  latex_code = "\n" + generate_latex(row) + "\n"
  print(latex_code)
  with open("atc_latex.txt", "a") as myfile:
    myfile.write(latex_code)

#script to genereate latex code for kegg terms
import pandas as pd
def round_up_or_non_zero(value):
  count = 3
  while(count<=6):
    pvalue = round(value,count)
    if pvalue!=0:
      return '{:.6f}'.format(pvalue)
    count += 1

'''
\multirow{1}{*}{\nm{BP}} & \multirow{1}{*}{\nm{Fat cell differentiation}} & \multirow{1}{*}{\nm{6}} & \multirow{1}{*}{\nm{6.667}} & \multirow{1}{*}{\nm{0}} & \multirow{1}{*}{\nm{\textit{EGR2 MAFB CCND1}}} & \multirow{1}{*}{\nm{16.157}} &  \multirow{1}{*}{\nm{0.034}} \\
& \nm{} & & & & \nm{\textit{ID4 HMGA2 ZFPM2}} & & \\ \midrule
'''

def generate_latex(row):
  print(dict(row))
  term = row['Description'].strip().split()
  term[0] = term[0].capitalize()
  count = int(row['Count'])
  perct = round(float(row['%']),3)
  pvalue = round_up_or_non_zero(float(row['PValue']))
  genes = sorted(g.strip() for g in row["Genes"].split(','))
  fe = round(float(row['Fold Enrichment']),3)
  fdr = round(float(row['FDR']),3)


  latex_code = ""
  latex_code = f"{{\\nm{{{' '.join(word.capitalize() for word in term)}}}}}  & {{\\nm{{{count}}}}} & {{\\nm{{{perct}}}}} & {{\\nm{{{str(pvalue)}}}}} &"
  latex_code += f"{{\\nm{{\\textit{{{' '.join(genes)}}}}}}} & {{\\nm{{{fe}}}}} & {{\\nm{{{fdr}}}}} \\\ \\midrule"
  return latex_code

  '''
  if len(term) >= 3:
    terms = ' '.join(term[:3])
    del term[:3]
    latex_code += f"\\multirow{{1}}{{*}}{{\\nm{{{terms}}}}} & "
  else:
    terms = ' '.join(term[:])
    del term[:]
    latex_code += f"\\multirow{{1}}{{*}}{{\\nm{{{terms}}}}} & "

  latex_code += f"\\multirow{{1}}{{*}}{{\\nm{{{count}}}}} & "
  latex_code += f"\\multirow{{1}}{{*}}{{\\nm{{{round(perct,3)}}}}} & "
  latex_code += f"\\multirow{{1}}{{*}}{{\\nm{{\\textit{{{round(pvalue,6)}}}}}}} & "
  latex_code += f"\\multirow{{1}}{{*}}{{\\nm{{{' '.join(genes[:1]).strip()}}}}} & "
  del genes[:1]
  latex_code += f"\\multirow{{1}}{{*}}{{\\nm{{{round(fe,3)}}}}} & "
  latex_code += f"\\multirow{{1}}{{*}}{{\\nm{{{round(fdr,3)}}}}}\\\ "

  while True:
    latex_code += "\n"
    if len(term) >= 3:
      terms = ' '.join(term[:3])
      del term[:3]
      latex_code += f"\\nm{{{terms}}} & "
    elif len(term) <3 and len(term) > 0 and len(genes) != 0:
      terms = ' '.join(term[:])
      del term[:]
      latex_code += f"\\nm{{{terms}}} & "
    elif len(term) <3 and len(term) > 0 and len(genes) == 0:
      terms = ' '.join(term[:])
      del term[:]
      latex_code += f"\\nm{{{terms}}} & & & & & & \\\ "
    else:
      latex_code += f" & "

    if len(genes) >=2:
      latex_code += f"& & &  \\nm{{\\textit{{{' '.join(genes[:2]).strip()}}}}}  & & \\\ "
      del genes[:2]
    elif len(genes) <2 and len(genes) > 0:
      latex_code += f" & & &  \\nm{{\\textit{{{' '.join(genes[:2]).strip()}}}}}  & & \\\ "
      del genes[:]
    elif len(genes) <2 and len(genes) > 0 and len(term)==0:
      latex_code += f"& & &  \\nm{{\\textit{{{' '.join(genes[:2]).strip()}}}}}  & & \\\ "
      del genes[:]
    else:
      pass

    if len(term) ==0 and len(genes) == 0:
      latex_code += f"\\midrule \n"
      print(latex_code)
      return latex_code
    '''


i = 0
df = pd.read_csv("kegg_atc.csv")
for index,row in df.iterrows():
  i += 1
  latex_code = "\n" + generate_latex(row) + "\n"
  print(latex_code)
  with open("atc_kegg_latex.txt", "a") as myfile:
    myfile.write(latex_code)